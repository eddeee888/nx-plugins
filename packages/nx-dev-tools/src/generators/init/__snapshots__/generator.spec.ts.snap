// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`nx-dev-tools generator Files generation .env.docker-compose content 1`] = `
"PRIMARY_DOMAIN=bam.fakecom

MYSQL_ROOT_PASSWORD=root
MYSQL_PORT=3306

MAIN_SERVICE_NAME=bam
MAIN_SERVICE_PORT=3000

PRISMA_SCHEMA_FLAG=--schema=libs/bam-prisma/src/prisma/schema.prisma
PRISMA_DATABASE_URL=mysql://root:root@database:3306/bam?schema=public
PRISMA_BINARY_TARGET=[\\"native\\",\\"linux-musl\\"]
"
`;

exports[`nx-dev-tools generator Files generation .env.local content 1`] = `
"PRIMARY_DOMAIN=bam.fakecom
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/core.sh content 1`] = `
"#!/bin/bash

set -e

CORE_CMD_NAME=\\"bb\\"

function display_help {
  echo
  echo \\"Usage: $CORE_CMD_NAME [option...]\\" >&2
  echo
  echo \\"vm-up                 Set up minimum networking requirements\\"
  echo \\"vm-down               Turn off all services and stop all containers\\"
  echo \\"up [service?]         Start one or all services in detached mode\\"
  echo \\"down                  Stop the project, remove all containers\\"
  echo \\"build [service?]      Rebuild a service or all services\\"
  echo \\"start [service?]      Start a service or all services\\"
  echo \\"stop [service?]       Stop a service or all services\\"
  echo \\"exec [service?]       Execute a command inside a service\\"
  echo \\"run [service?]        Run a service\\"
  echo \\"shell [service?]      Shell into a service\\"
  echo \\"logs [service?]       Look at the log of a particular service or all services\\"
  echo \\"rebuild [service?]    Rebuild image of a service with no cache\\"
  echo \\"recreate [service?]   Recreate a service container\\"
  echo
  exit 1
}

function run {
  # Go to root project directory
  BIN_DIR=$(dirname $(readlink $(type -P $CORE_CMD_NAME)))
  cd $BIN_DIR/../..

  # Set env to make it easier to load files in subsequent scripts
  export ROOT_DIR=$(pwd)
  export UTILS_DC=$BIN_DIR/utils-dc.sh
  export UTILS_CONST=$BIN_DIR/utils-constants.sh

  # Run command
  script_name=$1
  shift



  # dc-* ( docker-compose scripts ), ws-* ( workspace scripts ) are the main commands so if we don't find a command, try to prefix dc-
  # e.g. if \`somecmd.sh\` does not exist, \`dc-somecmd.sh\` will be checked
  if [[ -f $BIN_DIR/$script_name.sh ]]; then
    $BIN_DIR/$script_name.sh $@
  elif [[ -f $BIN_DIR/dc-$script_name.sh ]]; then
    $BIN_DIR/dc-$script_name.sh $@
  elif [[ -f $BIN_DIR/ws-$script_name.sh ]]; then
    $BIN_DIR/ws-$script_name.sh $@
  else
    echo \\"$script_name command not found\\"
    exit 1
  fi
}

function main {
  #If no command, show help menu 
  if [ ! $1 ]
  then
      display_help
      exit 1
  fi
  
  run $@
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-build.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc build $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-build-dev-images.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_CONST

function clean_images {
  docker rmi -f $PROJECT_NAME/dev
  docker rmi -f $PROJECT_NAME/dev-backend
}

function build_dev_images {
  image=$1

  docker-compose \\\\
    --file dev-tools/docker-images/build-dev-images.yml \\\\
    --env-file=.env.docker-compose \\\\
    build --no-cache $image
}

function main {
  clean_images
  build_dev_images dev
  build_dev_images dev-backend
}

main
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-down.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc down\\"
  eval $cmd
}

main
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-exec.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc exec $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-logs.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc logs $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-rebuild.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc rm -f -s $@ && dc build --no-cache $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-recreate.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc rm -f -s $@ && dc up -d $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-run.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc run $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-shell.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc exec $1 /bin/bash\\"
  eval $cmd
}

main $1
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-start.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc start $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-stop.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc stop --timeout=1 $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/dc-up.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  local cmd=\\"dc up -d $@\\"
  eval $cmd
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/init.sh content 1`] = `
"#!/bin/bash

set -e

CURRENT_DIR=\\"$( cd \\"$( dirname \\"\${BASH_SOURCE[0]}\\" )\\" >/dev/null && pwd )\\"
REVERSE_PROXY_CERTIFICATE_DIR=\\"\${CURRENT_DIR}/../reverse-proxy/certificates\\"
source $CURRENT_DIR/utils-constants.sh

function remove_old_symlink {
  if [ -f $USR_BIN/$CORE_CMD_NAME ]; then
    echo \\"=> Removing old command...\\"
    sudo rm $USR_BIN/$CORE_CMD_NAME
  fi
  echo -e \\"=> Successfully removed old command!\\\\n\\"
}

function setup_symlink_permission {
  echo \\"=> Setting up permissions for core command...\\"
  sudo chmod a+rx $CURRENT_DIR/core.sh
  echo -e \\"=> Successfully set up core command permissions!\\\\n\\"
}

function symlink {
  echo \\"=> Symlinking core command...\\"
  sudo ln -s $CURRENT_DIR/core.sh $USR_BIN/$CORE_CMD_NAME
  echo -e \\"=> Successfully symlinked core command!\\\\n\\"
}

function main {
  echo -e \\"Welcome to \\\\\\"$CORE_CMD_NAME\\\\\\" setup!\\"
  echo -e \\"======== **** ========\\\\n\\"

  remove_old_symlink
  setup_symlink_permission
  symlink
  $CORE_CMD_NAME init-cert $PRIMARY_DOMAIN $REVERSE_PROXY_CERTIFICATE_DIR/primary
  yarn install

  echo -e \\"\\\\n=> Successfully set up \\\\\\"$CORE_CMD_NAME\\\\\\"!\\\\n\\"
  echo -e \\"Run the following command to initialize the project:\\\\n\\"
  echo -e \\"$CORE_CMD_NAME vm-up && $CORE_CMD_NAME build-dev-image && $CORE_CMD_NAME up && nx init-database main-prisma\\\\n\\"
}

main
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/init-cert.sh content 1`] = `
"#!/bin/bash

set -e

function create_root_cert_and_key {
  echo \\"=> Creating Root CA...\\"

  SUBJECT=\\"/C=AU/ST=None/L=None/O=None/CN=root.com\\"
  
  openssl genrsa -out $1/rootCA.key 2048
  openssl req -x509 -new -nodes -key $1/rootCA.key -subj \\"$SUBJECT\\" -sha256 -days 1024 -out $1/rootCA.pem

  echo -e \\"=> Successfully created Root CA!\\\\n\\"
}

function create_certificate {
  echo \\"=> Creating certificate for \\\\\\"$1\\\\\\"...\\"

  COMMON_NAME=$1
  SUBJECT=\\"/C=AU/ST=Victoria/L=Melbourne/O=None/CN=$COMMON_NAME\\"
  NUM_OF_DAYS=365
  
  openssl req -new -newkey rsa:2048 -sha256 -nodes -keyout $2/device.key -subj \\"$SUBJECT\\" -out $2/device.csr
  echo \\"
      authorityKeyIdentifier=keyid,issuer
      basicConstraints=CA:FALSE
      keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
      subjectAltName = @alt_names

      [alt_names]
      DNS.1 = \${COMMON_NAME}
  \\" > /tmp/__v3.ext
  
  openssl x509 \\\\
    -req -in $2/device.csr \\\\
    -CA $2/rootCA.pem \\\\
    -CAkey $2/rootCA.key \\\\
    -CAserial $2/.srl \\\\
    -CAcreateserial \\\\
    -out $2/device.crt \\\\
    -days $NUM_OF_DAYS \\\\
    -sha256 \\\\
    -extfile /tmp/__v3.ext

  echo -e \\"=> Successfully created certificate for \\\\\\"$1\\\\\\"!\\\\n\\"
}

function trust_root_ca {
  echo \\"=> Trusting Root CA...\\"
  sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain $1/rootCA.pem
  echo -e \\"=> Successfully trusted Root CA!\\\\n\\"
}

function main {
  echo \\"=> Setting up TLS...\\"

  if [ ! -f $1/fullchain.pem ]; then
    echo \\"=> No cert detected... Creating new certs...\\"
    mkdir -p $2
    create_root_cert_and_key $2
    create_certificate $1 $2
    trust_root_ca $2
  else
    echo \\"=> Existing cert detected... Skipping cert creation.\\"
  fi

  echo -e \\"=> Successfully set up certs!\\\\n\\"
}

main $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/utils-constants.sh content 1`] = `
"#!/bin/bash

CORE_CMD_NAME=\\"bb\\"
PROJECT_NAME=\\"bam\\"
USR_BIN=\\"/usr/local/bin\\"
TOP_LEVEL_DOMAIN=\\"fakecom\\"
PRIMARY_DOMAIN=\\"\${PROJECT_NAME}.\${TOP_LEVEL_DOMAIN}\\"
DOCKER_PROJECT_NAME=\\"\${PROJECT_NAME}_\${TOP_LEVEL_DOMAIN}\\"
DNS_PORT=53535
RESOLVER_DIR=\\"/etc/resolver\\"
RESOLVER_FILE=\\"$RESOLVER_DIR/$PRIMARY_DOMAIN\\"
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/utils-dc.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_CONST

function dc {
  local cmd=\\"docker-compose --env-file=.env.docker-compose -p \${DOCKER_PROJECT_NAME} $@\\"
  echo \\"=> \${CORE_CMD_NAME}.compose: \\"$cmd
  eval $cmd
}
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/vm-down.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_CONST

function remove_resolver_file {
  if [ -e $RESOLVER_FILE ]; then 
    echo \\"=> Removing old resolver file $RESOLVER_FILE ...\\"
    sudo rm $RESOLVER_FILE
    echo \\"=> Successfully removed $RESOLVER_FILE\\"
  fi
}

function main {
  remove_resolver_file
  $CORE_CMD_NAME stop
}

main
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/vm-up.sh content 1`] = `
"#!/bin/bash

set -e

source $UTILS_DC

function main {
  echo -e \\"=> Checking resolver file...\\\\n\\"

  # Make the directory
  if [ ! -e $RESOLVER_DIR ]; then 
    sudo mkdir -p $RESOLVER_DIR
    echo -e \\"Created new directory: $RESOLVER_DIR\\\\n\\"
  fi

  if [ -e $RESOLVER_FILE ]; then 
    echo \\"=> Removing old resolver file $RESOLVER_FILE ...\\"
    sudo rm $RESOLVER_FILE
    echo -e \\"=> Successfully removed $RESOLVER_FILE\\\\n\\"
  fi
  

  echo \\"=> Creating new resolver file $RESOLVER_FILE ...\\"
  sudo sh -c \\"echo '# This is auto-generated. Do NOT edit this file\\\\nnameserver 127.0.0.1 \\\\nport $DNS_PORT' >> $RESOLVER_FILE\\"
  echo -e \\"=> Successfully created resolver file: $RESOLVER_FILE\\\\n\\"
}

main
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/bin/ws-nx.sh content 1`] = `
"#!/bin/bash

set -e

nx $@
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/dnsmasq/dnsmasq.conf content 1`] = `
"address=/fakecom/127.0.0.1
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/docker-images/Dockerfile.dev content 1`] = `
"FROM node:16.14-alpine

WORKDIR /usr/src/app

RUN apk update \\\\
  && apk add bash git curl \\\\
  && rm -rf /var/cache/apk/*

COPY . .

RUN yarn global add nx \\\\
  && yarn install \\\\
  && rm -rf $(yarn cache dir)
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/docker-images/Dockerfile.dev.dockerignore content 1`] = `
"# See http://help.github.com/ignore-files/ for more about ignoring files.

# compiled output
/dist
/tmp
/out-tsc

# dependencies
/node_modules

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/docker-images/Dockerfile.dev-backend content 1`] = `
"FROM bam/dev

ARG PRISMA_SCHEMA_FLAG
ARG PRISMA_DATABASE_URL
ARG PRISMA_BINARY_TARGET

WORKDIR /usr/src/app

RUN PRISMA_DATABASE_URL=$PRISMA_DATABASE_URL \\\\
    PRISMA_BINARY_TARGET=$PRISMA_BINARY_TARGET \\\\
    yarn prisma generate $PRISMA_SCHEMA_FLAG
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/docker-images/build-dev-images.yml content 1`] = `
"version: '3.7'

services:
  dev:
    image: bam/dev:latest
    build:
      context: ../..
      dockerfile: dev-tools/docker-images/Dockerfile.dev

  dev-backend:
    image: bam/dev-backend:latest
    build:
      context: ../..
      dockerfile: dev-tools/docker-images/Dockerfile.dev-backend
      args:
        PRISMA_SCHEMA_FLAG: \${PRISMA_SCHEMA_FLAG}
        PRISMA_DATABASE_URL: \${PRISMA_DATABASE_URL}
        PRISMA_BINARY_TARGET: \${PRISMA_BINARY_TARGET}
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/reverse-proxy/.gitignore content 1`] = `
"certificates/
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/reverse-proxy/Dockerfile content 1`] = `
"FROM nginx:1.22.0-alpine

RUN apk update \\\\ 
  && apk add bash \\\\
  && apk add openssl \\\\
  && rm -rf /var/cache/apk/*

WORKDIR /opt

COPY ./dev-tools/reverse-proxy/certificates/primary/device.crt /usr/share/nginx/certificates/primary/device.crt
COPY ./dev-tools/reverse-proxy/certificates/primary/device.key /usr/share/nginx/certificates/primary/device.key

COPY ./dev-tools/reverse-proxy/proxy.conf /etc/nginx/proxy.conf
COPY ./dev-tools/reverse-proxy/ws.conf /etc/nginx/ws.conf
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/reverse-proxy/proxy.conf content 1`] = `
"proxy_redirect    off;
proxy_set_header  Host $host;
proxy_set_header  X-Real-IP $remote_addr;
proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header  X-Forwarded-Host $server_name;
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/reverse-proxy/templates/http.conf.template content 1`] = `
"upstream \${MAIN_SERVICE_NAME} {
  server \${MAIN_SERVICE_NAME}:\${MAIN_SERVICE_PORT};
}

server {
  listen 80;
  
  location / {
        return 301 https://$host$request_uri;
  }      
}

server {
  listen 443 ssl http2;
  server_name \${PRIMARY_DOMAIN};
  ssl_certificate /usr/share/nginx/certificates/primary/device.crt;
  ssl_certificate_key /usr/share/nginx/certificates/primary/device.key;

  location / {
    proxy_pass http://\${MAIN_SERVICE_NAME};
    include /etc/nginx/proxy.conf;
    include /etc/nginx/ws.conf;
  }
}
"
`;

exports[`nx-dev-tools generator Files generation dev-tools/reverse-proxy/ws.conf content 1`] = `
"proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection \\"Upgrade\\";
proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;
"
`;

exports[`nx-dev-tools generator Files generation docker-compose.yml content 1`] = `
"version: '3.7'

services:
  bam:
    image: bam/dev-backend:latest
    command: nx serve bam --port=\${MAIN_SERVICE_PORT}
    volumes:
      - .:/usr/src/app/
      - /usr/src/app/node_modules
    networks:
      - vm

  database:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=\${MYSQL_ROOT_PASSWORD}
      - MYSQL_PORT=\${MYSQL_PORT}
    volumes:
      - database_data:/var/lib/mysql
    expose:
      - \${MYSQL_PORT}
    ports:
      - \${MYSQL_PORT}:\${MYSQL_PORT}
    networks:
      - vm

  reverse-proxy:
    build:
      context: .
      dockerfile: dev-tools/reverse-proxy/Dockerfile
    tty: true
    ports:
      - 80:80
      - 443:443
    depends_on:
      - bam
      - dnsmasq
    environment:
      PRIMARY_DOMAIN: \${PRIMARY_DOMAIN}
      MAIN_SERVICE_NAME: \${MAIN_SERVICE_NAME}
      MAIN_SERVICE_PORT: \${MAIN_SERVICE_PORT}
    volumes:
      - ./dev-tools/reverse-proxy/templates:/etc/nginx/templates
    networks:
      - vm

  dnsmasq:
    image: 4km3/dnsmasq:2.85-r2-alpine-3.14
    ports:
      - 53535:53/tcp
      - 53535:53/udp
    cap_add: ['NET_ADMIN']
    volumes:
      - ./dev-tools/dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf
    networks:
      - vm

volumes:
  database_data:

networks:
  vm:
"
`;
